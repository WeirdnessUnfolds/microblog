networks: 
    monitor:
    
volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  node-exporter:
    image: prom/node-exporter:v1.2.2
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitor
    
  prometheus:
    image: prom/prometheus:v2.31.1
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./rules.yml:/etc/prometheus/rules.yml
      # - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=24h"
      - "--web.enable-lifecycle"
    networks:
      - monitor
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:8.2.4
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitor
    ports:
      - "3000:3000"

  alertmanager:
    image: prom/alertmanager:v0.23.0
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/config/alertmanager.yml
    command:
        - "--config.file=/config/alertmanager.yml"
    networks:
      - monitor


  mysql:
    image: mysql/mysql-server:5.7
    environment:
      MYSQL_ROOT_PASSWORD: 'database-root-password'
      MYSQL_DATABASE: 'microblog'
      MYSQL_USER: 'microblog'
      MYSQL_PASSWORD: 'database-password'
    ports:
      - "3306:3306"
    networks:
      - monitor

  prod:
    build:
      dockerfile: docker/Dockerfile_prod  # Här hänvisar vi till Dockerfile_prod istället för att hämta från Docker Hub
    environment:
      SECRET_KEY: "my-secret-key"
      DATABASE_URL: "mysql+pymysql://microblog:database-password@mysql/microblog"
    ports:
      - "8000:8000"
    depends_on:
      - mysql
    command: gunicorn -b 0.0.0.0:8000 -w 4 microblog:app
    networks:
      - monitor

  test:
    build:
      context: .
      dockerfile: docker/Dockerfile_test
    environment:
      DATABASE_URL: "mysql+pymysql://microblog:database-password@mysql/microblog"
    depends_on:
      - mysql
    volumes:
      - ./app:/app/app
      - ./tests:/app/tests
    command: ./make_test.sh